From 796a34771534a394f99df82552222e1e670311be Mon Sep 17 00:00:00 2001
From: Michael Carroll <mjcarroll@intrinsic.ai>
Date: Thu, 21 Aug 2025 20:06:20 +0000
Subject: [PATCH 1/2] Remove use of runfiles from the zenoh helpers

Signed-off-by: Michael Carroll <mjcarroll@intrinsic.ai>
---
 .../pubsub/zenoh_util/zenoh_helpers.cc        | 47 ++++++++++---------
 1 file changed, 26 insertions(+), 21 deletions(-)

diff --git a/intrinsic/platform/pubsub/zenoh_util/zenoh_helpers.cc b/intrinsic/platform/pubsub/zenoh_util/zenoh_helpers.cc
index b94efec1..b766ef05 100644
--- a/intrinsic/platform/pubsub/zenoh_util/zenoh_helpers.cc
+++ b/intrinsic/platform/pubsub/zenoh_util/zenoh_helpers.cc
@@ -2,7 +2,9 @@
 
 #include "intrinsic/platform/pubsub/zenoh_util/zenoh_helpers.h"
 
+#include <array>
 #include <cstdlib>
+#include <filesystem>
 #include <string>
 #include <vector>
 
@@ -10,13 +12,10 @@
 #include "absl/strings/match.h"
 #include "absl/strings/str_split.h"
 #include "absl/strings/string_view.h"
-#include "ortools/base/path.h"
-#include "rules_cc/cc/runfiles/runfiles.h"
+// #include "ortools/base/path.h"
 
 namespace intrinsic {
 
-using ::rules_cc::cc::runfiles::Runfiles;
-
 bool RunningUnderTest() {
   return (getenv("TEST_TMPDIR") != nullptr) ||
          (getenv("PORTSERVER_ADDRESS") != nullptr);
@@ -26,26 +25,32 @@ bool RunningInKubernetes() {
   return getenv("KUBERNETES_SERVICE_HOST") != nullptr;
 }
 
+#ifndef INTRINSIC_SDK_CMAKE_LIB_PATH
+#error "Compiler definition INTRINSIC_SDK_CMAKE_LIB_PATH is required."
+#endif
+
+#ifndef INTRINSIC_SDK_CMAKE_SHARE_PATH
+#error "Compiler definition INTRINSIC_SDK_CMAKE_SHARE_PATH is required."
+#endif
+
 std::string GetZenohRunfilesPath(absl::string_view file_path) {
-  std::string error;
-  std::string path = std::string(file_path);
-  std::unique_ptr<Runfiles> runfiles;
-  std::string repository = BAZEL_CURRENT_REPOSITORY;
-  if (repository == "") {
-    // If empty, running in current repository.
-    repository = "_main";
-  }
+  // Patched by intrinsic-dev/intrinsic_sdk_ros.git to work in a CMake context.
+  // TODO(wjwwood): consider using ament_index to make this code relocatable.
+  std::array<std::filesystem::path, 2> prefix_paths = {
+    std::filesystem::path(INTRINSIC_SDK_CMAKE_LIB_PATH),
+    std::filesystem::path(INTRINSIC_SDK_CMAKE_SHARE_PATH)
+  };
 
-  if (RunningUnderTest()) {
-    std::string error;
-    runfiles = std::unique_ptr<Runfiles>(Runfiles::CreateForTest(&error));
-    path = runfiles->Rlocation(file::JoinPath(repository, file_path));
-  } else if (!RunningInKubernetes()) {
-    runfiles = std::unique_ptr<Runfiles>(
-        Runfiles::Create(program_invocation_name, &error));
-    path = runfiles->Rlocation(file::JoinPath(repository, file_path));
+  // Prefer a more complete path in the lib or share path over just the give file_path.
+  for (const auto & prefix_path : prefix_paths) {
+    std::filesystem::path possible_path = prefix_path / file_path;
+    if (std::filesystem::exists(possible_path)) {
+      return possible_path.string();
+    }
   }
-  return path;
+
+  // Return the original file_path if nothing better was found.
+  return std::string(file_path);
 }
 
 absl::Status ValidZenohKeyexpr(absl::string_view keyexpr) {
-- 
2.51.0.rc2.233.g662b1ed5c5-goog

